unit CanonSdk;

interface

uses
	Windows;

const
	CDMajorVersion = 7;
	CDMinorVersion = 3;

type
	cdUInt8 = Byte;
	cdInt8 = ShortInt;
	cdChar = Char;
	cdWChar = WideChar;
	PcdWChar = PWideChar;
	cdUInt16 = Word;
	cdInt16 = SmallInt;
	cdUInt32 = LongWord;
	cdInt32 = LongInt;
	cdFloat32 = Single;
	cdUInt64 = Int64;
	cdBoolean = cdUInt16;
	cdTime = cdUInt32;
	cdError = cdUInt32;
	cdCAPI = cdError;
	cdEventID = cdUInt32;
	cdReleaseEventID = cdUInt32;
	cdContext = cdUInt32;
	cdHandle = cdUInt32;
	cdHSource = cdHandle;
	cdHItem = cdHandle;
	cdHVolume = cdHItem;
	cdHFolder = cdHItem;
	cdHImageItem = cdHItem;
	cdHImageData = cdHandle;
	cdHEnum = cdHandle;
	cdDevDataType = cdUInt32;
	cdPortType = cdUInt32;
	cdProgressStatus = cdUInt32;
	cdDevicePropertyID = cdUInt32;
	cdAttribute = cdUInt32;
	cdFlashMode = cdUInt16;
	cdCompensation = cdUInt16;
	cdCompQuality = cdUInt16;
	cdImageSize = cdUInt16;
	cdReleaseControlCap	= cdUInt32;
	cdReleaseControlFaculty = cdReleaseControlCap;
	cdRelDataKind = cdUInt16;
	cdProgressOption = cdUInt32;
	cdDataType = cdUInt32;
	cdMemType = cdUInt32;
	cdWhence = cdUInt16;
	cdPermission = cdUInt16;

type
	TCDUnknown = Integer;
	TCDVersionInfo = record
		Size: cdUInt16;
		MajorVersion: cdUInt16;
		MinorVersion: cdUInt16;
		ReleaseVersion: cdUInt16;
		chVersion: array[0..31] of Char;
	end;

const
	CD_DEV_DATA_TYPE_UNKNOWN		= $FFFFFFFF;
	CD_DEV_DATA_TYPE_UNDECIDED	= $00000000;
	CD_DEV_DATA_TYPE_1					= $00000001;
	CD_DEV_DATA_TYPE_2					= $00000002;

type
	TCDPortDescripSTI = record
		DataType: cdDevDataType;
		DeviceInternalName: array[0..200] of cdWChar;//127] of cdWChar;
	end;

	TCDPortDescripWIA = record
		DataType: cdDevDataType;
		pDIPDevID: PcdWChar;
	end;

	TCDPortDescripRsrvd = record
		ModelID: cdUInt32;
		szLaunchedDeviceName: array[0..75] of cdChar;
	end;

	TCDPortDescripUnion = record
		case Integer of
			0: (STI: TCDPortDescripSTI);
			1: (WIA: TCDPortDescripWIA);
			2: (rsrvd: TCDPortDescripRsrvd);
	end;

const
	CD_PORT_TYPE_NO_PORT		 = 0;
	CD_PORT_TYPE_STI				 = 3;
	CD_PORT_TYPE_WIA				 = 4;
	CD_PORT_TYPE_ANY				 = $7FFFFFFF;

type
	TCDSourceInfo = record
		PortType: cdPortType;
		u: TCDPortDescripUnion;
	end;

const
	CD_ATTRIB_READ				= $00000001;
	CD_ATTRIB_WRITE				= $00000002;
	CD_ATTRIB_READ_WRITE	= CD_ATTRIB_READ or CD_ATTRIB_WRITE;
	CD_ATTRIB_HIDDEN			= $00000010;
	CD_ATTRIB_ARCHIVE			= $00000020;
	CD_ATTRIB_SYSTEM			= $00000040;

	{ Invalid ID }
	CD_DEVICE_PROP_INVALID													= $FFFFFFFF;
	{ Camera model ID.
				 Attribute : Read only
				 Size/Type : 4 / cdUInt32 }
	CD_DEVICE_PROP_MODEL_ID													= $00000001;
	{ Camera model name.
				 Attribute : Read only
				 Size/Type : 32 / cdChar[32] }
	CD_DEVICE_PROP_MODEL_NAME												= $00000002;
	{ Slide show capacity.
				 Attribute : Read only
				 Size/Type : sizeof(cdSlideShowCap) / cdSlideShowCap }
	CD_DEVICE_PROP_SLIDE_SHOW_CAP										= $00000003;
	{ AddPicture suport.
				 Attribute : Read only
				 Size/Type : sizeof(cdBoolean) / cdBoolean
		 Values:
				TRUE : The device supports the CDAddPicture.
				FALSE: The device does not support the CDAddPicture. }
	CD_DEVICE_PROP_UPLOAD_FILE_CAP									= $00000004;
	{ Image rotation suport.
				 Attribute : Read only
				 Size/Type : sizeof(cdBoolean) / cdBoolean
		 Values:
			 TRUE : The device supports the image rotation function.
			 FALSE: The device does not support the image rotation function. }
	CD_DEVICE_PROP_ROTATION_CAP											= $00000005;
	{ DPOF version number supported by the device.
				 Attribute : Read only
				 Size/Type : 4 / cdUInt32 }
	CD_DEVICE_PROP_DPOF_CAP													= $00000006;
	{ Valid area in the DCF thumbnail data.
				 Attribute : Read only
				 Size/Type :	/ }
	CD_DEVICE_PROP_THUMB_VALID_AREA									= $00000007;
	{ Remote release control capacity.
				 Attribute : Read only
				 Size/Type : 4 / cdUInt32
		 Meaning:
			If 0x40000000 bit is set, the camera supports the remote release control functions. }
	CD_DEVICE_PROP_RELEASE_CONTROL_CAP							= $00000008;
	{ RAW file specification generated by the device.
				 Attribute : Read only
				 Size/Type : sizeof(cdRawDevelopFaculty) / cdRawDevelopFaculty }
	CD_DEVICE_PROP_RAW_DEVELOP_FACULTIES						= $00000009;
	{ File parser faculty.
				 Attribute : Read only
				 Size/Type : sizeof(cdParseFaculty) / cdParseFaculty }
	CD_DEVICE_PROP_PARSE_FACULTIES									= $0000000A;
	{ Owner's name.
				 Attribute : Read / Write
				 Size/Type : 32 / cdChar[32] }
	CD_DEVICE_PROP_OWNER_NAME												= $0000000C;
	{ Time set in the device.
				 Attribute : Read / Write
				 Size/Type : 4 / cdTime }
	CD_DEVICE_PROP_TIME															= $0800000D;
	{ Firmware version in the device.
				 Attribute : Read only
				 Size/Type : 32 / cdChar[32] }
	CD_DEVICE_PROP_FIRMWARE_VERSION									= $0000000E;
	{ Battery status of the device.
				 Attribute : Read only
				 Size/Type : 4 / cdUInt32
		 Values:
			Refer to the description of the cdEVENT_BATTERY_LEVEL_CHANGED event
		in the cdEvent.h. }
	CD_DEVICE_PROP_BATTERY_STATUS										= $0000000F;
	{ Direct transfer status of the device.
				 Attribute : Read only
				 Size/Type : 1 / cdUInt8 }
	CD_DEVICE_PROP_DIRECT_TRANSFER_STATUS						= $00000010;

type
	TDeviceProperty = record
		DevPropID: cdDevicePropertyID;
		Access: cdAttribute;
		DataSize: cdUInt32;
		rsrvd: cdUInt32;
	end;

	TURational = record
		Numerator: cdUInt32;
		Denominator: cdUInt32;
	end;

	TRational = record
		Numerator: cdInt32;
		Denominator: cdInt32;
	end;

{ cdFlashMode }

const
	CD_FLASH_MODE_OFF									= $0000;
	CD_FLASH_MODE_AUTO								= $0001;
	CD_FLASH_MODE_ON									= $0002;
	CD_FLASH_MODE_RED_EYE							= $0003;
	CD_FLASH_MODE_SLOW_SYNC						= $0004;
	CD_FLASH_MODE_AUTO_PLUS_RED_EYE		= $0005;
	CD_FLASH_MODE_ON_PLUS_RED_EYE			= $0006;
	CD_FLASH_MODE_NA									= $00FF;

{ cdCompensation }

	CD_COMP_300_PLUS									= $0000;
	CD_COMP_266_PLUS 									= $0003;
	CD_COMP_250_PLUS									= $0004;
	CD_COMP_233_PLUS									= $0005;
	CD_COMP_200_PLUS									= $0008;
	CD_COMP_166_PLUS									= $000B;
	CD_COMP_150_PLUS									= $000C;
	CD_COMP_133_PLUS									= $000D;
	CD_COMP_100_PLUS									= $0010;
	CD_COMP_066_PLUS									= $0013;
	CD_COMP_050_PLUS									= $0014;
	CD_COMP_033_PLUS									= $0015;
	CD_COMP_000_PLUS									= $0018;
	CD_COMP_033_MINUS									= $001B;
	CD_COMP_050_MINUS									= $001C;
	CD_COMP_066_MINUS									= $001D;
	CD_COMP_100_MINUS									= $0020;
	CD_COMP_133_MINUS									= $0023;
	CD_COMP_150_MINUS									= $0024;
	CD_COMP_166_MINUS									= $0025;
	CD_COMP_200_MINUS									= $0028;
	CD_COMP_233_MINUS									= $002B;
	CD_COMP_250_MINUS									= $002C;
	CD_COMP_266_MINUS									= $002D;
	CD_COMP_300_MINUS									= $0030;
	CD_COMP_NA												= $00FF;

{ cdCompQuality }

	CD_COMP_QUALITY_UNKNOWN						= $FFFF;
	CD_COMP_QUALITY_ECONOMY						= $0001;
	CD_COMP_QUALITY_NORMAL						= $0002;
	CD_COMP_QUALITY_FINE							= $0003;
	CD_COMP_QUALITY_LOSSLESS					= $0004;
	CD_COMP_QUALITY_RAW								= $0004;
	CD_COMP_QUALITY_SUPERFINE					= $0005;

{ cdImageSize }

	CD_IMAGE_SIZE_UNKNOWN							= $FFFF;
	CD_IMAGE_SIZE_LARGE								= $0000;
	CD_IMAGE_SIZE_MEDIUM							= $0001;
	CD_IMAGE_SIZE_SMALL								= $0002;
	CD_IMAGE_SIZE_MEDIUM1							= $0005;
	CD_IMAGE_SIZE_MEDIUM2							= $0006;
	CD_IMAGE_SIZE_MEDIUM3							= $0007;

{ cdReleaseControlCap }

	{ Supports the remote release control functions }
	CD_RELEASE_CONTROL_CAP_SUPPORT 										= $40000000;
	{ Supports the zoom control }
	CD_RELEASE_CONTROL_CAP_ZOOM												= $00000001;
	{ Supports the setting of the shooting parameters }
	CD_RELEASE_CONTROL_CAP_SETPRM											= $00000002;
	{ Supports the viewfinder functions }
	CD_RELEASE_CONTROL_CAP_VIEWFINDER									= $00000004;
	{ Needs to terminate the Viewfinder mode when the CDRelease() function is executed }
	CD_RELEASE_CONTROL_CAP_ABORT_VIEWFINDER						= $00000008;
	{ Supports the AF lock/unlock functions }
	CD_RELEASE_CONTROL_CAP_AF_LOCK										= $00000010;
	{ Remote Release Control Function Version 1 }
	CD_RELEASE_CONTROL_CAP_RCFVER_1_5									= $00000020;

{ cdProgressOption Options for progress callback functions }

	{ Callback function not called }
	CD_PROG_NO_REPORT																	= $00000001;
	{ Called only when operation is finished }
	CD_PROG_REPORT_DONE																= $00000002;
	{ Called periodically during the operation }
	CD_PROG_REPORT_PERIODICALLY												= $00000003;

{ cdProgressStatus Status of the current operation during progress callback function }

	{ Status is data transfer between camera and host computer }
	CD_STATUS_TRANSFER																= $00000001;
	{ Status is image data converting }
	CD_STATUS_CONVERT																	= $00000002;
	{ Status is image data development }
	CD_STATUS_DEVELOPMENT															= $00000003;

{ cdRelDataKind }

	CD_REL_KIND_THUMB_TO_PC														= $0001;
	CD_REL_KIND_PICT_TO_PC														= $0002;
	CD_REL_KIND_THUMB_TO_CAM													= $0004;
	CD_REL_KIND_PICT_TO_CAM													 = $0008;

{ cdDataType }

	CD_DATA_TYPE_THUMBNAIL														= $00000010;
	CD_DATA_TYPE_PICTURE															= $00000020;
	CD_DATA_TYPE_SOUND																= $00000030;
	CD_DATA_TYPE_MOVIE																= $00000040;
	CD_DATA_TYPE_PLUS_JPEG														= $00000050;
	CD_DATA_TYPE_PREVIEW_JPEG													= $00000060;

{ cdWhence }

	CD_START																					= 1;
	CD_CURRENT																				= 2;
	CD_END																						= 3;

{ cdParmission Access permission with which to open stream }

	CD_READ	 																		  		= 1;
	CD_WRITE																			 		= 2;
	CD_UPDATE 																				= 4;

	CD_MEMTYPE_FILE																		= 0;
	CD_MEMTYPE_STREAM															  	 = 1;

	CD_MAX_TRANSFER_PATH_LENGTH = 2;

type
	TReleaseImageInfo = record
		SequenceID: cdUInt32; { Capture ID }
		DataType: cdDataType; { Shows the type of image data }
		Format: cdUInt8;			{ The format of the image data }
		DataSize: cdUInt32;	 { The size of the image data }
		FileName: array[0..CD_MAX_TRANSFER_PATH_LENGTH - 1] of cdChar; { Not used }
	end;

{ Open: procedure(Context: cdContext; Permission: cdPermission; var Err: cdError); stdcall;
	Close: procedure(Context: cdContext; var Err: cdError); stdcall;
	Read: procedure(Context: cdContext; Buf: Pointer; var BufSize: cdUInt32; var Err: cdError); stdcall;
	Write: procedure(Context: cdContext; Buf: Pointer; var BufSize: cdUInt32; var Err: cdError); stdcall;
	Seek: procedure(Context: cdContext; Whence: cdWhence; Offset: cdInt32; var Err: cdError); stdcall;
	Tell: function(Context: cdContext; var Err: cdError): cdInt32; stdcall; }

	TCameraStream = record
		Context: cdContext;
		Open: Pointer;
		Close: Pointer;
		Read: Pointer;
		Write: Pointer;
		Seek: Pointer;
		Tell: Pointer;
	end;
	PCameraStream = ^TCameraStream;

	TStgMedium = record
		MemType: cdMemType;
		case cdMemType of
			0: (FileName: PChar);
			1: (Stream: PCameraStream);
	end;
	PStgMedium = ^TStgMedium;

{ File Formats }

const
	CD_VIEWFINDER_WIDTH								= 320;
	CD_VIEWFINDER_HEIGHT							= 240;
	CD_FILE_FORMAT_JPG								= 0;
	CD_FILE_FORMAT_BMP								= 1;

(* TCDEventCallbackFunction event macros *)

const
	CD_EVENT_ISSPECIFIC_MASK	= $08000000;
	CD_EVENT_RESERVED_MASK		= $07F00000;
	CD_EVENT_SEVERITY_MASK		= $000F0000;
	CD_EVENT_EVENTID_MASK			= $0000FFFF;

function CDEventIsSpecificMask(event: cdEventID): Boolean;
function CDEventReservedMask(event: cdEventID): cdEventID;
function CDEventSeverityMask(event: cdEventID): cdEventID;
function CDEventEventIDMask(event: cdEventID): cdEventID;

(* Event Severity *)

const
{ Nothing bad happened: this notification is just informational }
	CD_EVENT_SEVERITY_NONE			 = $00000000;
{ The camera is going to shut down, or some warning event happened.
	More detail information is given in the event code.
	If client does not know the event code, it should close device
	immediatly. }
	CD_EVENT_SEVERITY_WARNING		 = $00020000;
{ The camera has shut down. The Event ID tells the reason of the shut
	down. }
	CD_EVENT_SEVERITY_SHUTDOWN	 = $00040000;

(* Event Data *)

	{ Event data tells current battery level }

	CD_EVENT_BATTERY_LEVEL_CHANGED							 = $0001;
	CD_LEVEL_MASK																 = $0000000F;

	CD_LEVEL_NORMAL															 = $00000006;
	CD_LEVEL_WEAK																 = $00000004;
	CD_LEVEL_SAFETY_LOW													 = $00000003;
	CD_LEVEL_LB																	 = $00000002;

	CD_STATUS_NORMAL														 = $00000006;
	CD_STATUS_WEAK															 = $00000004;
	CD_STATUS_SAFETY_LOW												 = $00000003;

	CD_KIND_MASK																 = $F0000000;
	CD_KIND_UNKNOWN															 = $00000000;
	CD_KIND_AC																	 = $10000000;
	CD_KIND_LI																	 = $20000000;
	CD_KIND_NIH																	 = $30000000;
	CD_KIND_NICD																 = $40000000;
	CD_KIND_ALMN																 = $50000000;

	{ Event data tells whether gate opened }

	CD_EVENT_DIAL_CHANGE 												 = $0002;

	CD_EVENT_CF_GATE_CHANGED										 = $0003;
	CD_EVENT_PARAM_CF_GATE_OPEN									 = $00000000;

	{ data tells whether cover opened }

	CD_EVENT_BATT_COVER_CHANGED 								 = $0004;
	CD_EVENT_PARAM_BATT_COVER_OPEN							 = $00000000;

	{	Combining this with CD_EVENT_SEVERITY_SHUTD= has;OWN tells that the camera
	already shut down because of the time out.
		Combining this with CD_EVENT_SEVERITY_WARNI= is;NG tells that the camera
	going to shut down.
	The event data tells how long (in minutes) camera would remain waking up. }

	CD_EVENT_CONNECTION_TIME_OUT 								 = $0005;

{ USB/IEEE1394 connection is disappeared }

	CD_EVENT_CONNECTION_DISAPPEARED							 = $000D;

{ Update Camera conditions event }

	CD_EVENT_UPDATE_CAMERA_CONDITIONS						 = $000E;

	CD_EVENT_PARAM_FILE_CREATED									 = $00000001;
	CD_EVENT_PARAM_FILE_REMOVED									 = $00000002;
	CD_EVENT_PARAM_FILE_ATTRIBUTE_CHANGED				 = $00000004;
	CD_EVENT_PARAM_FORMATED											 = $00000100;
	{ PTP Camera event's flag }
	CD_EVENT_PARAM_PTP													 = $00010000;

	{ Used as parameter }
	CD_EVENT_CHANGE_LOCK_STATUS									 = $000F;
	CD_EVENT_PARAM_DISPLAY_PLAY_OR_NENU					 = $01000000;
	CD_EVENT_PARAM_PROCESSING_REC_OR_PREPARE_REC = $02000000;
	{ used as lower 3Byte for parameter }
	CD_EVENT_PARAM_LOCK_TYPE1										 = $00000001;
	CD_EVENT_PARAM_LOCK_TYPE2										 = $00000002;
	CD_EVENT_PARAM_LOCK_TYPE3										 = $00000004;
	CD_EVENT_PARAM_LOCK_TYPE4										 = $00000008;
	CD_EVENT_PARAM_LOCK_TYPE5										 = $00000010;
	CD_EVENT_PARAM_LOCK_TYPE6										 = $00000020;

	CD_EVENT_UNRECOVERABLE_ERROR								 = $0006;
	CD_EVENT_UNKNOWN_COMMAND_RECEIVED 					 = $0007;
	CD_EVENT_RELEASE_PARAM_CHANGED							 = $000B;

{ cdEventCallbackFunction Called when a camera event occurs }
type
	TCDEventCallbackFunction = function(EventID: cdEventID; Data: Pointer; DataSize: cdUInt32; Context: cdContext): cdError; stdcall;

{ cdReleaseEventCallbackFunction Called when a remote release control related event occurs }
	TCDReleaseEventCallbackFunction = function(EventID: cdReleaseEventID; Data: Pointer; DataSize: cdUInt32; Context: cdContext): cdError; stdcall;

{ cdProgressCallbackFunction Called at regular intervals during processing to notify
		the client application of the progress of various processes.
			Progress = Percentage
			Status = Type of process currently in progress
			Context = Context }
	TCDProgressCallbackFunction = function(Progress: cdUInt32; Status: cdProgressStatus; Context: cdContext): cdError; stdcall;

{ cdViewFinderCallbackFunction Callback function for retrieving Viewfinder data }
	TCDViewFinderCallbackFunction = function(Buf: Pointer; Size: cdUInt32; Format: cdUInt32; Context: cdContext): cdError; stdcall;

var
	CDStartSDK: function(const VersionInfo: TCDVersionInfo; Option: cdUInt32): cdError; stdcall;
	CDFinishSDK: function: cdError; stdcall;
	CDGetSDKVersion: function(var VersionInfo: TCDVersionInfo): cdError; stdcall;
	CDEnumDeviceReset: function(Kind: cdUInt32; var hEnum: cdHEnum): cdError; stdcall;
	CDEnumDeviceNext: function(hEnum: cdHEnum; var SourceInfo: TCDSourceInfo): cdError; stdcall;
	CDGetDeviceCount: function(hEnum: cdHEnum; var Count: cdUInt32): cdError; stdcall;
	CDEnumDeviceRelease: function(hEnum:	cdHEnum): cdError; stdcall;
	CDOpenSource: function(const SourceInfo: TCDSourceInfo; var hSource: cdHSource): cdError; stdcall;
	CDCloseSource: function(hSource: cdHSource): cdError; stdcall;
	CDRegisterEventCallbackFunction: function(hSource: cdHSource; pFunc: TCDEventCallbackFunction; Context: cdContext; var hFunc: cdHandle): cdError; stdcall;
	CDUnregisterEventCallbackFunction: function(hSource: cdHSource; hFunc: cdHandle): cdError; stdcall;
	CDEnumDevicePropertyReset: function(hSource: cdHSource; Option: cdUInt32; var hEnum: cdHEnum): cdError; stdcall;
	CDEnumDevicePropertyNext: function(hEnum: cdHEnum; var DeviceProperty: TDeviceProperty): cdError; stdcall;
	CDGetDevicePropertyCount: function(hEnum: cdHEnum; var Count: cdUInt32): cdError; stdcall;
	CDEnumDevicePropertyRelease: function(hEnum: cdHEnum): cdError; stdcall;
	CDGetDevicePropertyData: function(hSource: cdHSource; DevPropID: cdDevicePropertyID; var BufSize: cdUInt32; Buf: Pointer; Option: cdUInt32): cdError; stdcall;
	CDSetDevicePropertyData: function(hSource: cdHSource; DevPropID: cdDevicePropertyID; var BufSize: cdUInt32; Buf: Pointer; Option: cdUInt32): cdError; stdcall;
	{ cdEnumDevicePropertyReset..cdEnumSupportedImageSizeRelease }
	CDLockUI: function(hSource: cdHSource): cdError; stdcall;
	CDUnlockUI: function(hSource: cdHSource): cdError; stdcall;
	CDSetUILockTimeOutTime: function(hSource: cdHSource; Time: cdTime): cdError; stdcall;
	CDFormat: function(hVolume: cdHVolume): cdError; stdcall;
	{ Remote Control Functions }
	CDEnterReleaseControl: function(hSource: cdHSource; pFunc: TCDReleaseEventCallbackFunction; Context: cdContext): cdError; stdcall;
	CDExitReleaseControl: function(hSource: cdHSource): cdError; stdcall;
	CDGetReleaseControlFaculty: function(hSource: cdHSource; var Faculty: cdReleaseControlFaculty): cdError; stdcall;
	CDSelectReleaseDataKind: function(hSource: cdHSource; Kind: cdRelDataKind): cdError; stdcall;
	CDRelease: function(hSource: cdHSource; bSync: cdBoolean; CallbackFunc: TCDProgressCallbackFunction; Context: cdContext; ProgressOption: cdProgressOption; var NumData: cdUInt32): cdError; stdcall;
	CDGetReleasedData: function(hSource: cdHSource; CallbackFunc: TCDProgressCallbackFunction; Context: cdContext; ProgressOption: cdProgressOption; var Info: TReleaseImageInfo; StgMedium: PStgMedium): cdError; stdcall;
	CDStartViewfinder: function(hSource: cdHSource; Format: cdUInt32; pFunc: TCDViewFinderCallbackFunction; Context: cdContext): cdError; stdcall;
	CDTermViewfinder: function(hSource: cdHSource): cdError; stdcall;
	{ Auto Focus }
	CDAFLock: function(hSource: cdHSource; bLock: cdBoolean): cdError; stdcall;
	{ Image Quality and Size }
	CDSetImageFormatAttribute: function(hSource: cdHSource; Quality: cdCompQuality; Size: cdImageSize): cdError; stdcall;
	CDGetImageFormatAttribute: function(hSource: cdHSource; var Quality: cdCompQuality; var Size: cdImageSize): cdError; stdcall;
	CDEnumImageFormatAttributeReset: function(hSource: cdHSource; var hEnum: cdHEnum): cdError; stdcall;
	CDEnumImageFormatAttributeNext: function(hEnum: cdHEnum; var Quality: cdCompQuality; var Size: cdImageSize): cdError; stdcall;
	CDEnumImageFormatAttributeRelease: function(hEnum: cdHEnum): cdError; stdcall;
	CDGetImageFormatAttributeCount: function(hEnum: cdHEnum; var Count: cdUInt32): cdError; stdcall;
	{ Zoom Settings }
	CDGetMaximumZoomPos: function(hSource: cdHSource; var MaxZoomPos: cdUInt32; var MaxOpticalZoomPos: cdUInt32): cdError; stdcall;
	CDGetZoomPos: function(hSource: cdHSource; var ZoomPos: cdUInt32): cdError; stdcall;
	CDGetDZoomMagnification: function(hSource: cdHSource; var DZoomMag: TURational): cdError; stdcall;
	CDSetZoomPos: function(hSource: cdHSource; ZoomPos: cdUInt32): cdError; stdcall;
	{ Flash Settings }
	CDSetFlashSetting: function(hSource: cdHSource; Mode: cdFlashMode; Compensation: cdCompensation): cdError; stdcall;
	CDGetFlashSetting: function(hSource: cdHSource; var Mode: cdFlashMode; var Compensation: cdCompensation): cdError; stdcall;
	CDEnumFlashSettingReset: function(hSource: cdHSource; var hEnum: cdHEnum): cdError; stdcall;
	CDEnumFlashSettingNext: function(hEnum: cdHEnum; var FlashMode: cdFlashMode): cdError; stdcall;
	CDEnumFlashSettingRelease: function(hEnum: cdHEnum): cdError; stdcall;
	CDGetFlashSettingCount: function(hEnum: cdHEnum; var Count: cdUInt32): cdError; stdcall;

(* CD-SDK Error Code Masks *)

const
	CD_ERROR_ISSPECIFIC_MASK												= $80000000;
	CD_ERROR_COMPONENTID_MASK												= $7F000000;
	CD_ERROR_RESERVED_MASK													= $00FF0000;
	CD_ERROR_ERRORID_MASK														= $0000FFFF;

(* CD-SDK Base Component IDs *)
	CD_ERROR_CLIENT_COMPONENTID											= $01000000;
	CD_ERROR_LLSDK_COMPONENTID											= $02000000;
	CD_ERROR_HLSDK_COMPONENTID				 							= $03000000;
	CD_ERROR_PROPERTY_PARSING_COMPONENTID						= $04000000;
	CD_ERROR_VIEW_DEVELOPMENT_COMPONENTID	 					= $05000000;
	CD_ERROR_VIEW_DECODING_COMPONENTID							= $06000000;
	CD_ERROR_COLOR_MAPPING_COMPONENTID							= $07000000;
	CD_ERROR_PICTURE_COLLECTION_COMPONENTID 				= $08000000;
	CD_ERROR_SETUP_COMPONENTID											= $09000000;
	CD_ERROR_IWRAP_COMPONENTID											= $0A000000;
	CD_ERROR_PSUSD_COMPONENTID											= $0B000000;
	CD_ERROR_CDSDK_COMPONENTID											= $0C000000;
	CD_ERROR_RDSDK_COMPONENTID											= $0D000000;

(* CD-SDK Function Success Code *)

	CD_OK																						= $00000000;

(* CD-SDK Generic Error IDs *)

	(* Miscellaneous errors *)
	CD_UNIMPLEMENTED							 									= $00000001;
	CD_INTERNAL_ERROR																= $00000002;
	CD_MEM_ALLOC_FAILED															= $00000003;
	CD_MEM_FREE_FAILED															= $00000004;
	CD_OPERATION_CANCELLED													= $00000005;
	CD_INCOMPATIBLE_VERSION													= $00000006;
	CD_NOT_SUPPORTED																= $00000007;
	CD_UNEXPECTED_EXCEPTION													= $00000008;
	CD_PROTECTION_VIOLATION													= $00000009;
	CD_MISSING_SUBCOMPONENT													= $0000000A;
	CD_SELECTION_UNAVAILABLE												= $0000000B;

	(* File errors *)
	CD_FILE_IO_ERROR																= $00000020;
	CD_FILE_TOO_MANY_OPEN														= $00000021;
	CD_FILE_NOT_FOUND																= $00000022;
	CD_FILE_OPEN_ERROR															= $00000023;
	CD_FILE_CLOSE_ERROR															= $00000024;
	CD_FILE_SEEK_ERROR															= $00000025;
	CD_FILE_TELL_ERROR															= $00000026;
	CD_FILE_READ_ERROR															= $00000027;
	CD_FILE_WRITE_ERROR															= $00000028;
	CD_FILE_PERMISSION_ERROR												= $00000029;
	CD_FILE_DISK_FULL_ERROR													= $0000002A;
	CD_FILE_ALREADY_EXISTS													= $0000002B;
	CD_FILE_FORMAT_UNRECOGNIZED											= $0000002C;
	CD_FILE_DATA_CORRUPT														= $0000002D;
	CD_FILE_NAMING_NA																= $0000002E;

	(* Directory errors *)
	CD_DIR_NOT_FOUND																= $00000040;
	CD_DIR_IO_ERROR																	= $00000041;
	CD_DIR_ENTRY_NOT_FOUND													= $00000042;
	CD_DIR_ENTRY_EXISTS															= $00000043;
	CD_DIR_NOT_EMPTY																= $00000044;

	(* Property errors *)
	CD_PROPERTIES_UNAVAILABLE												= $00000050;
	CD_PROPERTIES_MISMATCH													= $00000051;
	CD_PROPERTIES_NOT_LOADED												= $00000053;

	(* Function Parameter errors *)
	CD_INVALID_PARAMETER														= $00000060;
	CD_INVALID_HANDLE																= $00000061;
	CD_INVALID_POINTER															= $00000062;
	CD_INVALID_INDEX																= $00000063;
	CD_INVALID_LENGTH																= $00000064;
	CD_INVALID_FN_POINTER														= $00000065;
	CD_INVALID_SORT_FN															= $00000066;

	(* Device errors *)
	CD_DEVICE_NOT_FOUND															= $00000080;
	CD_DEVICE_BUSY								 									= $00000081;
	CD_DEVICE_INVALID																= $00000082;
	CD_DEVICE_EMERGENCY															= $00000083;
	CD_DEVICE_MEMORY_FULL														= $00000084;
	CD_DEVICE_INTERNAL_ERROR												= $00000085;
	CD_DEVICE_INVALID_PARAMETER											= $00000086;
	CD_DEVICE_NO_DISK																= $00000087;
	CD_DEVICE_DISK_ERROR														= $00000088;
	CD_DEVICE_CF_GATE_CHANGED												= $00000089;
	CD_DEVICE_DIAL_CHANGED													= $0000008A;
	CD_DEVICE_NOT_INSTALLED													= $0000008B;
	CD_DEVICE_STAY_AWAKE														= $0000008C;
	CD_DEVICE_NOT_RELEASED													= $0000008D;

	(* Stream errors *)
	CD_STREAM_IO_ERROR						 									= $000000A0;
	CD_STREAM_NOT_OPEN															= $000000A1;
	CD_STREAM_ALREADY_OPEN													= $000000A2;
	CD_STREAM_OPEN_ERROR														= $000000A3;
	CD_STREAM_CLOSE_ERROR														= $000000A4;
	CD_STREAM_SEEK_ERROR														= $000000A5;
	CD_STREAM_TELL_ERROR														= $000000A6;
	CD_STREAM_READ_ERROR														= $000000A7;
	CD_STREAM_WRITE_ERROR														= $000000A8;
	CD_STREAM_PERMISSION_ERROR											= $000000A9;
	CD_STREAM_COULDNT_BEGIN_THREAD									= $000000AA;
	CD_STREAM_BAD_OPTIONS														= $000000AB;
	CD_STREAM_END_OF_STREAM													= $000000AC;

	(* Communications errors *)
	CD_COMM_PORT_IS_IN_USE				 									= $000000C0;
	CD_COMM_DISCONNECTED					 									= $000000C1;
	CD_COMM_DEVICE_INCOMPATIBLE											= $000000C2;
	CD_COMM_BUFFER_FULL															= $000000C3;
	CD_COMM_USB_BUS_ERR															= $000000C4;

	(* Lock/Unlock *)
	CD_USB_DEVICE_LOCK_ERROR												= $000000D0;
	CD_USB_DEVICE_UNLOCK_ERROR											= $000000D1;

	(* STI/WIA *)
	CD_STI_UNKNOWN_ERROR														= $000000E0;
	CD_STI_INTERNAL_ERROR														= $000000E1;
	CD_STI_DEVICE_CREATE_ERROR											= $000000E2;
	CD_STI_DEVICE_RELEASE_ERROR											= $000000E3;
	CD_DEVICE_NOT_LAUNCHED													= $000000E4;

	CD_ENUM_NA																			= $000000F0;
	CD_INVALID_FN_CALL															= $000000F1;
	CD_HANDLE_NOT_FOUND															= $000000F2;
	CD_INVALID_ID																		= $000000F3;
	CD_WAIT_TIMEOUT_ERROR														= $000000F4;

	(* PTP *)
	CD_SESSION_NOT_OPEN														= $2003;
	CD_INVALID_TRANSACTIONID											= $2004;
	CD_INCOMPLETE_TRANSFER												= $2007;
	CD_INVALID_STRAGEID														= $2008;
	CD_DEVICEPROP_NOT_SUPPORTED										= $200A;
	CD_INVALID_OBJECTFORMATCODE										= $200B;
	CD_SELF_TEST_FAILED														= $2011;
	CD_PARTIAL_DELETION														= $2012;
	CD_SPECIFICATION_BY_FORMAT_UNSUPPORTED				= $2014;
	CD_NO_VALID_OBJECTINFO												= $2015;
	CD_INVALID_CODE_FORMAT												= $2016;
	CD_UNKNOWN_VENDER_CODE												= $2017;
	CD_CAPTURE_ALREADY_TERMINATED									= $2018;
	CD_INVALID_PARENTOBJECT												= $201A;
	CD_INVALID_DEVICEPROP_FORMAT									= $201B;
	CD_INVALID_DEVICEPROP_VALUE										= $201C;
	CD_SESSION_ALREADY_OPEN												= $201E;
	CD_TRANSACTION_CANCELLED											= $201F;
	CD_SPECIFICATION_OF_DESTINATION_UNSUPPORTED		= $2020;
	CD_UNKNOWN_COMMAND														= $A001;
	CD_OPERATION_REFUSED													= $A005;
	CD_LENS_COVER_CLOSE														= $A006;

	CD_LAST_GENERIC_ERROR_PLUS_ONE								= $00F5;

function LoadCanonSdk: Boolean;

implementation

function CDEventIsSpecificMask(event: cdEventID): Boolean;
begin
	Result := event and CD_EVENT_ISSPECIFIC_MASK <> 0;
end;

function CDEventReservedMask(event: cdEventID): cdEventID;
begin
	Result := event and CD_EVENT_RESERVED_MASK;
end;

function CDEventSeverityMask(event: cdEventID): cdEventID;
begin
	Result := event and CD_EVENT_SEVERITY_MASK;
end;

function CDEventEventIDMask(event: cdEventID): cdEventID;
begin
	Result := event and CD_EVENT_EVENTID_MASK;
end;

type
	TCDFunctions = record
		{ Version of this structure }
		Version: Longword;
		{ Basic Functions }
		StartSDK: Pointer;
		FinishSDK: Pointer;
		GetSDKVersion: Pointer;
		{ Utility Functions }
		CreateMemStream: Pointer;
		DestroyMemStream: Pointer;
		GetStreamInfo: Pointer;
		{ Source Control Functions }
		EnumDeviceReset: Pointer;
		EnumDeviceNext: Pointer;
		GetDeviceCount: Pointer;
		EnumDeviceRelease: Pointer;
		OpenSource: Pointer;
		CloseSource: Pointer;
		RegisterEventCallbackFunction: Pointer;
		UnregisterEventCallbackFunction: Pointer;
		{ Device Management Functions }
		EnumDevicePropertyReset: Pointer;
		EnumDevicePropertyNext: Pointer;
		GetDevicePropertyCount: Pointer;
		EnumDevicePropertyRelease: Pointer;
		GetDevicePropertyData: Pointer;
		SetDevicePropertyData: Pointer;
		EnumSupportedImageSizeReset: Pointer;
		EnumSupportedImageSizeNext: Pointer;
		GetSupportedImageSizeCount: Pointer;
		EnumSupportedImageSizeRelease: Pointer;
		LockUI: Pointer;
		UnlockUI: Pointer;
		SetUILockTimeOutTime: Pointer;
		Format: Pointer;
		{ Collect Functions }
		EnumVolumeReset: Pointer;
		EnumVolumeNext: Pointer;
		GetVolumeCount: Pointer;
		EnumVolumeRelease: Pointer;
		GetVolumeInfo: Pointer;
		EnumItemReset: Pointer;
		EnumItemNext: Pointer;
		GetItemCount: Pointer;
		EnumItemRelease: Pointer;
		EnumImageItemReset: Pointer;
		EnumImageItemNext: Pointer;
		GetImageItemCount: Pointer;
		EnumImageItemRelease: Pointer;
		GetItemInfo: Pointer;
		MakeImageItem: Pointer;
		{ Image Management Functions }
		OpenImage: Pointer;
		CloseImage: Pointer;
		GetThumbnail: Pointer;
		GetPicture: Pointer;
		GetMovie: Pointer;
		GetSound: Pointer;
		EnumImageDataInItemReset: Pointer;
		EnumImageDataInItemNext: Pointer;
		GetImageDataInItemCount: Pointer;
		EnumImageDataInItemRelease: Pointer;
		GetImageDataInfo: Pointer;
		GetImageData: Pointer;
		AddPicture: Pointer;
		DeleteImage: Pointer;
		{ Markfile Functions }
		IsPrintMarked: Pointer;
		IsSlideMarked: Pointer;
		IsTransferMarked: Pointer;
		{ Image Property Functions }
		EnumBaseImageDataPropertyReset: Pointer;
		EnumBaseImageDataPropertyNext: Pointer;
		GetBaseImageDataPropertyCount: Pointer;
		EnumBaseImageDataPropertyRelease: Pointer;
		GetBaseImageDataProperty: Pointer;
		EnumImageItemPropertyReset: Pointer;
		EnumImageItemPropertyNext: Pointer;
		GetImageItemPropertyCount: Pointer;
		EnumImageItemPropertyRelease: Pointer;
		GetImageItemProperty: Pointer;
		SetImageItemProperty: Pointer;
		FlashImageItemProperty: Pointer;
		GetThumbnailValidArea: Pointer;
		{ Remote Release Control Functions }
		EnterReleaseControl: Pointer;
		ExitReleaseControl: Pointer;
		SelectReleaseDataKind: Pointer;
		Release: Pointer;
		GetReleasedData: Pointer;
		StartViewfinder: Pointer;
		TermViewfinder: Pointer;
		SelectViewFinderCameraOutput: Pointer;
		ActViewfinderAutoFunctions: Pointer;
		GetMaximumZoomPos: Pointer;
		GetZoomPos: Pointer;
		GetDZoomMagnification: Pointer;
		SetZoomPos: Pointer;
		SetImageFormatAttribute: Pointer;
		GetImageFormatAttribute: Pointer;
		SetDriveMode: Pointer;
		GetDriveMode: Pointer;
		SetShootingMode: Pointer;
		GetShootingMode: Pointer;
		SetAvValue: Pointer;
		GetAvValue: Pointer;
		SetTvValue: Pointer;
		GetTvValue: Pointer;
		SetExposureComp: Pointer;
		GetExposureComp: Pointer;
		SetWBSetting: Pointer;
		GetWBSetting: Pointer;
		SetAFDistanceSetting: Pointer;
		GetAFDistanceSetting: Pointer;
		SetFlashSetting: Pointer;
		GetFlashSetting: Pointer;
		GetNumAvailableShot: Pointer;
		EnumRelCamSettingReset: Pointer;
		EnumRelCamSettingNext: Pointer;
		GetRelCamSettingCount: Pointer;
		EnumRelCamSettingRelease: Pointer;
		GetRelCamSettingData: Pointer;
		SetRelCamSettingData: Pointer;
		{ Added in V5.0 }
		EnumImageFormatAttributeReset: Pointer;
		EnumImageFormatAttributeNext: Pointer;
		EnumImageFormatAttributeRelease: Pointer;
		GetImageFormatAttributeCount: Pointer;
		EnumDriveModeReset: Pointer;
		EnumDriveModeNext: Pointer;
		EnumDriveModeRelease: Pointer;
		GetDriveModeCount: Pointer;
		EnumShootingModeReset: Pointer;
		EnumShootingModeNext: Pointer;
		EnumShootingModeRelease: Pointer;
		GetShootingModeCount: Pointer;
		EnumAvValueReset: Pointer;
		EnumAvValueNext: Pointer;
		EnumAvValueRelease: Pointer;
		GetAvValueCount: Pointer;
		EnumTvValueReset: Pointer;
		EnumTvValueNext: Pointer;
		EnumTvValueRelease: Pointer;
		GetTvValueCount: Pointer;
		EnumExposureCompReset: Pointer;
		EnumExposureCompNext: Pointer;
		EnumExposureCompRelease: Pointer;
		GetExposureCompCount: Pointer;
		EnumWBSettingReset: Pointer;
		EnumWBSettingNext: Pointer;
		EnumWBSettingRelease: Pointer;
		GetWBSettingCount: Pointer;
		EnumAFDistanceSettingReset: Pointer;
		EnumAFDistanceSettingNext: Pointer;
		EnumAFDistanceSettingRelease: Pointer;
		GetAFDistanceSettingCount: Pointer;
		EnumFlashSettingReset: Pointer;
		EnumFlashSettingNext: Pointer;
		EnumFlashSettingRelease: Pointer;
		GetFlashSettingCount: Pointer;
		EnumRelCamSettingDataReset: Pointer;
		EnumRelCamSettingDataNext: Pointer;
		EnumRelCamSettingDataRelease: Pointer;
		GetRelCamSettingDataCount: Pointer;
		AFLock: Pointer;
		GetVolumeName: Pointer;
		{ Added in V6.0 }
		GetReleaseControlFaculty: Pointer;
		FreeImageItem: Pointer;
		{ Added in V7.0 }
		GetImagePropertyPart: Pointer;
	end;

var
	SdkHandle: THandle;
	CDGetFunctions: function(var Functions: TCDFunctions): cdError; stdcall;

function LoadCanonSdk: Boolean;
var
	F: TCDFunctions;
begin
	if SdkHandle = 0 then
		SdkHandle := LoadLibrary('CDSDK.dll');
	if Sdkhandle <> 0 then
	begin
		CDGetFunctions := GetProcAddress(SdkHandle, 'CDGetFunctions');
		if @CDGetFunctions <> nil then
		begin
			F.Version :=	$07030000;
			if CDGetFunctions(F) = CD_OK then
			begin
				CDStartSDK := F.StartSDK;
				CDFinishSDK := F.FinishSDK;
				CDGetSDKVersion := F.GetSDKVersion;
				CDEnumDeviceReset := F.EnumDeviceReset;
				CDEnumDeviceNext := F.EnumDeviceNext;
				CDGetDeviceCount := F.GetDeviceCount;
				CDEnumDeviceRelease := F.EnumDeviceRelease;
				CDOpenSource := F.OpenSource;
				CDCloseSource := F.CloseSource;
				CDEnumDevicePropertyReset := F.EnumDevicePropertyReset;
				CDEnumDevicePropertyNext := F.EnumDevicePropertyNext;
				CDGetDevicePropertyCount := F.GetDevicePropertyCount;
				CDEnumDevicePropertyRelease := F.EnumDevicePropertyRelease;
				CDGetDevicePropertyData := F.GetDevicePropertyData;
				CDSetDevicePropertyData := F.SetDevicePropertyData;
				CDRegisterEventCallbackFunction := F.RegisterEventCallbackFunction;
				CDUnregisterEventCallbackFunction := F.UnregisterEventCallbackFunction;
				CDLockUI := F.LockUI;
				CDUnlockUI := F.UnlockUI;
				CDSetUILockTimeOutTime := F.SetUILockTimeOutTime;
				CDFormat := F.Format;
				CDEnterReleaseControl := F.EnterReleaseControl;
				CDExitReleaseControl := F.ExitReleaseControl;
				CDGetReleaseControlFaculty := F.GetReleaseControlFaculty;
				CDSelectReleaseDataKind := F.SelectReleaseDataKind;
				CDRelease := F.Release;
				CDGetReleasedData := F.GetReleasedData;
				CDStartViewfinder := F.StartViewfinder;
				CDTermViewfinder := F.TermViewfinder;
				CDAFLock := F.AFLock;
				CDSetImageFormatAttribute := F.SetImageFormatAttribute;
				CDGetImageFormatAttribute := F.GetImageFormatAttribute;
				CDEnumImageFormatAttributeReset := F.EnumImageFormatAttributeReset;
				CDEnumImageFormatAttributeNext := F.EnumImageFormatAttributeNext;
				CDEnumImageFormatAttributeRelease := F.EnumImageFormatAttributeRelease;
				CDGetImageFormatAttributeCount := F.GetImageFormatAttributeCount;
				CDGetMaximumZoomPos := F.GetMaximumZoomPos;
				CDGetZoomPos := F.GetZoomPos;
				CDGetDZoomMagnification := F.GetDZoomMagnification;
				CDSetZoomPos := F.SetZoomPos;
				CDSetFlashSetting := F.SetFlashSetting;
				CDGetFlashSetting := F.GetFlashSetting;
				CDEnumFlashSettingReset := F.EnumFlashSettingReset;
				CDEnumFlashSettingNext := F.EnumFlashSettingNext;
				CDEnumFlashSettingRelease := F.EnumFlashSettingRelease;
				CDGetFlashSettingCount := F.GetFlashSettingCount;
			end;
		end;
	end;
	Result := @CDStartSDK <> nil;
end;

end.
